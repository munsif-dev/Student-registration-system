@page "/register"
@using PointofSaleSystem.Models;
@using PointofSaleSystem.Services;
@using System.ComponentModel.DataAnnotations;

<div class="registration-container">
    <div class="registration-form-container">
        <h3 class="registration-heading">Create Account</h3>

        <form class="registration-form">
            <EditForm Model="@registerModel" OnValidSubmit="OnRegister">
                <DataAnnotationsValidator />
                <div class="form-group">
                    <label class="form-label" for="Username">Username:</label>
                    <InputText id="Username" @bind-Value="registerModel.Username" class="form-control" />
                    <ValidationMessage For="@(() => registerModel.Username)" />
                </div>

                <div class="form-group">
                    <label class="form-label" for="Password">Password:</label>
                    <InputText id="Password" @bind-Value="registerModel.Password" class="form-control" type="password" />
                    <ValidationMessage For="@(() => registerModel.Password)" />
                </div>

                <div class="form-group">
                    <label class="form-label" for="ConfirmPassword">Confirm Password:</label>
                    <InputText id="ConfirmPassword" @bind-Value="registerModel.ConfirmPassword" class="form-control" type="password" />
                    <ValidationMessage For="@(() => registerModel.ConfirmPassword)" />
                </div>

                <div class="register-button-container">
                    <button type="submit" class="btn btn-primary register-button">Register</button>
                </div>
            </EditForm>

            <div class="login-link">
                <p>Already have an account? <a href="/">Login</a>.</p>
            </div>
        </form>
    </div>
</div>

<style>
    body {
        background: radial-gradient(circle, black, #FF0000);
        margin: 0;
        font-family: 'Segoe UI Bold', sans-serif;
    }

    .registration-container {
        display: flex;
        align-items: center;
        justify-content: center;
        height: 100vh;
        background-image: url('your-background-image.jpg'); /* Add the path to your background image */
        background-size: cover;
        background-position: center;
        margin: 0;
    }

    .registration-form-container {
        background-color: rgba(255, 255, 255, 0.9);
        padding: 20px;
        border-radius: 10px;
        width: 300px;
        text-align: center;
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.2);
    }

    .registration-heading {
        color: #FF0000;
        margin-bottom: 20px;
        font-size: 24px;
    }

    .form-label {
        color: #333;
        display: block;
        margin-bottom: 8px;
        font-weight: bold;
    }

    .form-control {
        width: 100%;
        padding: 8px;
        margin-bottom: 15px;
        box-sizing: border-box;
    }

    .register-button-container {
        text-align: center;
    }

    .register-button {
        background-color: #FF0000;
        color: #fff;
        font-weight: bold;
        padding: 10px 20px;
        border: none;
        border-radius: 5px;
        cursor: pointer;
    }

    .login-link {
        margin-top: 20px;
        color: #333;
        font-size: 14px;
    }

        .login-link a {
            color: #FF0000;
            font-weight: bold;
            text-decoration: none;
        }
</style>

@code {
    private RegisterModel registerModel = new RegisterModel();
    private DatabaseHelper databaseHelper;
    @inject NavigationManager Navigation

    private class RegisterModel
    {
        [Required(ErrorMessage = "Username is required.")]
        public string? Username { get; set; }

        [Required(ErrorMessage = "Password is required.")]
        public string? Password { get; set; }

        [Compare(nameof(Password), ErrorMessage = "Passwords do not match.")]
        public string? ConfirmPassword { get; set; }
    }

    private void OnRegister()
    {
        try
        {
            // Assuming the database path is set appropriately
            databaseHelper = new DatabaseHelper();

            // Check if the username is already taken
            if (databaseHelper.ValidateUser(registerModel.Username, ""))
            {
                // Username already exists
                Console.WriteLine("Username already taken. Please choose a different one.");
                return;
            }

            // Register the user
            var newUser = new User { Username = registerModel.Username, Password = registerModel.Password };
            databaseHelper.Insert(newUser);

            // Successful registration
            Console.WriteLine("Registration successful");

            // Navigate to the login page after successful registration
            Navigation.NavigateTo("/");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error during registration: {ex.Message}");
        }
        finally
        {
            // Dispose of the database helper to release resources
            databaseHelper?.Dispose();
        }
    }

}