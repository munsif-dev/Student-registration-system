@page "/add_update_product"
@page "/update_product/{productID:int}" 
@inject IproductService ProductService
@inject NavigationManager Navigation
@using PointofSaleSystem.Models
@using PointofSaleSystem.Services
<h3 class="page-title">Add or Update Product Details</h3>

<div class="form-container">
    <EditForm Model="@productModel" OnValidSubmit="SaveProductRecordAsync">
        <DataAnnotationsValidator />
        <div class="form-group">
            <label class="form-label">Product Name:</label>
            <input @bind="productName" class="form-control" placeholder="Product Name">
            <ValidationMessage For="@(() => productName)" />
        </div>
        <div class="form-group">
            <label class="form-label">Enter Quantity:</label>
            <input @bind="quantity" class="form-control" placeholder="Quantity">
            <ValidationMessage For="@(() => quantity)" />
        </div>

        <div class="mt-2 form-group">
            <label class="form-label">Description:</label>
            <input @bind="description" class="form-control" placeholder="Description">
            <ValidationMessage For="@(() => description)" />
        </div>

        <div class="mt-2 form-group">
            <label class="form-label">Price:</label>
            <input @bind="price" class="form-control" placeholder="Price">
            <ValidationMessage For="@(() => price)" />
        </div>

        <div class="mt-2 form-group">
            <label class="form-label">Category:</label>
            <div class="radio-group">
                <div class="radio-option">
                    <div class="form-check">
                        <input checked="@(category=="Fast Moving")" @onchange="@(()=> setCategory("Fast Moving"))" class="form-check-input" type="radio" name="flexRadioDefault">
                        <label class="form-check-label" for="flexRadioDefault1">
                            Fast Moving
                        </label>
                    </div>
                </div>
                <div class="radio-option">
                    <div class="form-check">
                        <input checked="@(category=="Slow Moving")" @onchange="@(()=> setCategory("Slow Moving"))" class="form-check-input" type="radio" name="flexRadioDefault">
                        <label class="form-check-label" for="flexRadioDefault2">
                            Slow Moving
                        </label>
                    </div>
                </div>
                <ValidationMessage For="@(() => category)" />
            </div>
        </div>
    </EditForm>

    <button type="submit" @onclick="SaveProductRecordAsync" class="mt-2 btn btn-primary">Submit</button>

    <div>
        <button @onclick="GoBack" class="mt-2 btn btn-secondary">Go Back</button>
    </div>

</div>

<style>
    body {
        background: radial-gradient(circle, #B22222, #FF4500); /* Updated background gradient */
        color: #333; /* Dark text color */
        margin: 0;
        font-family: 'Segoe UI Bold', sans-serif;
    }

    .form-container {
        max-width: 400px;
        margin: 0 auto; /* Center the form container */
        padding: 20px;
        border-radius: 10px;
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.3); /* Box shadow for the container */
        text-align: left; /* Left-align the form content */
    }

    .page-title {
        font-size: 2.5em; /* Larger font size for the title */
        color: #000; /* Black for the title */
        font-weight: bold; /* Bold font style */
        font-family: 'Arial', sans-serif; /* Change the font family */
        text-align: center; /* Center-align the title */
        position: relative;
        margin-bottom: 20px; /* Add margin for better spacing */
    }

        .page-title::after {
            content: '';
            display: block;
            width: 100%; /* Adjust the width of the underline */
            height: 2px; /* Height of the underline */
            background-color: #000; /* Black color for the underline */
            position: absolute;
            bottom: 0;
            left: 0%; /* Center the underline horizontally */
        }

    .form-group {
        margin-bottom: 20px; /* Add margin for better spacing */
    }

    .form-label {
        color: #000; /* Black color for the form labels */
        display: block;
        margin-bottom: 8px;
        font-weight: bold;
    }

    .form-control {
        width: 100%;
        padding: 8px;
        margin-bottom: 15px;
        box-sizing: border-box;
    }

    .radio-group {
        display: flex;
        margin-top: 10px; /* Add margin for better spacing */
    }

    .radio-option {
        margin-right: 20px; /* Add margin for better spacing between radio options */
    }

    .btn-primary {
        background-color: darkolivegreen; /* Red-Orange for Submit button */
        color: #fff; /* White text color for Submit button */
    }

    .btn-secondary {
        background-color: #333; /* Dark Gray for Go Back button */
        color: #fff; /* White text color for Go Back button */
    }

</style>

@code {

    [Parameter]
    public int ProductID { get; set; }

    private ProductModel productModel = new ProductModel();


    private string? productName;
    private string? quantity;
    private string? description;
    private string? category;
    private string? price;


    private void setCategory(string cata)
    {
        this.category = cata;
    }

    protected async override Task OnInitializedAsync()
    {
        if ( ProductID > 0)
        {
            var response = await ProductService.GetProductByID(ProductID);
            if (response != null)
            {
                productName = response.ProductName;
                quantity = response.Quantity;
                description = response.Description;
                category = response.Category;
            }
        }
    }

    private async Task SaveProductRecordAsync()
    {
        var isValid = ValidateForm();
        if (!isValid)
            return;

        var productModel = new Models.ProductModel
            {
                ProductName = productName,
                Quantity = quantity,
                Description = description,
                Category = category,
                ProductID = ProductID,
                Price = price
            };

        int response = -1;
        if (ProductID > 0)
        {
            response = await ProductService.UpdateProduct(productModel);
            // update record
        }
        else
        {
            response = await ProductService.AddProduct(productModel);
            // add record
        }

        if (response > 0)
        {
            productName = quantity = price = description = category = string.Empty;
            await InvokeAsync(StateHasChanged);
            await App.Current.MainPage.DisplayAlert("Record Saved", "Record Saved To Student Table", "OK");
        }
        else
        {
            await App.Current.MainPage.DisplayAlert("Oops", "Something went wrong while adding record", "OK");
        }
    }

    private bool ValidateForm()
    {
        if (string.IsNullOrWhiteSpace(productName) || string.IsNullOrWhiteSpace(quantity) || string.IsNullOrWhiteSpace(description) || string.IsNullOrWhiteSpace(category) || (string.IsNullOrWhiteSpace(price) && string.IsNullOrEmpty(price)))
        {
            App.Current.MainPage.DisplayAlert("Validation Error", "Please fill in all required fields.", "OK");
            return false;
        }

        return true;
    }

    private void GoBack()
    {
        // Navigate back to the previous page using a special "back" URL
        Navigation.NavigateTo("/Home");
    }

}